<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Usuario Actual</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #f0f4f8, #d9e2ec);
      font-family: 'Segoe UI', sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    body.admin-role {
      background: linear-gradient(135deg, #fff3e0, #ffe0b2);
    }
    .admin-badge {
      display: flex;
      align-items: center;
      justify-content: center;
      background: #ffebee;
      color: #d32f2f;
      border: 2px solid #d32f2f;
      border-radius: 8px;
      padding: 0.75em 1.5em;
      font-size: 1.2em;
      font-weight: bold;
      margin: 1.5em auto 1em auto;
      max-width: 500px;
      box-shadow: 0 2px 8px rgba(211,47,47,0.07);
    }
    .admin-badge .icon {
      font-size: 1.5em;
      margin-right: 0.5em;
    }

    .header {
      background-color: white;
      padding: 1rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .nav {
      max-width: 1200px;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .nav h1 {
      margin: 0;
      color: #333;
      font-size: 1.5rem;
    }

    .nav a {
      color: #4a90e2;
      text-decoration: none;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      transition: background-color 0.3s;
    }

    .nav a:hover {
      background-color: #f0f4f8;
    }

    .profile-container {
      max-width: 800px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: white;
      border-radius: 16px;
      box-shadow: 0 8px 24px rgba(0,0,0,0.1);
    }

    .profile-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .profile-header h2 {
      color: #333;
      margin-bottom: 0.5rem;
    }

    .profile-header p {
      color: #666;
      margin: 0;
    }

    .profile-info {
      display: grid;
      gap: 1rem;
    }

    .info-item {
      padding: 1rem;
      background-color: #f8f9fa;
      border-radius: 8px;
    }

    .info-item h3 {
      color: #333;
      margin: 0 0 0.5rem 0;
      font-size: 1rem;
    }

    .info-item p {
      color: #666;
      margin: 0;
    }

    .loading {
      text-align: center;
      padding: 2rem;
      color: #666;
    }

    .error {
      text-align: center;
      padding: 2rem;
      color: #dc3545;
      background-color: #f8d7da;
      border-radius: 8px;
    }

    .role-badge {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.875rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .role-user {
      background-color: #e3f2fd;
      color: #1976d2;
    }

    .role-admin {
      background-color: #ffebee;
      color: #d32f2f;
    }

    .role-premium {
      background-color: #fff3e0;
      color: #f57c00;
    }
    .profile-menu-wrapper {
      position: relative;
      display: flex;
      align-items: center;
      margin-left: auto;
    }
    #profile-icon {
      padding: 0.25em 0.5em;
      border-radius: 50%;
      background: #e3f2fd;
      transition: background 0.2s;
    }
    #profile-icon:hover {
      background: #bbdefb;
    }
    .profile-menu {
      position: absolute;
      top: 2.5em;
      right: 0;
      background: white;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.07);
      min-width: 180px;
      z-index: 100;
      padding: 0.5em 0;
    }
    .profile-menu-item {
      display: block;
      padding: 0.75em 1.5em;
      color: #333;
      text-decoration: none;
      font-size: 1em;
      transition: background 0.2s;
    }
    .profile-menu-item:hover {
      background: #f0f4f8;
      color: #1976d2;
    }
  </style>
</head>
<body{{#if (eq user.role 'admin')}} class="admin-role"{{/if}}>
  <header class="header">
    <nav class="nav">
      <h1>Backend II - 75280</h1>
      <div class="profile-menu-wrapper">
        {{#if (eq user.role 'user')}}
        <span id="user-cart-icon" style="cursor:pointer; font-size:1.7em; margin-right:0.5em; position:relative;">
          üõí<span id="user-cart-count" style="position:absolute; top:-8px; right:-10px; background:#d32f2f; color:white; border-radius:50%; font-size:0.8em; padding:2px 6px;">0</span>
        </span>
        {{/if}}
        <span id="profile-icon" style="cursor:pointer; font-size: 1.7em; user-select: none;">üë§</span>
        <div id="profile-menu" class="profile-menu" style="display:none;">
          <a href="/users/reset-password" class="profile-menu-item">Reset password</a>
          <a href="#" id="request-admin-btn" class="profile-menu-item">Request Admin role</a>
          <a href="#" id="logout-btn" class="profile-menu-item">Cerrar sesi√≥n</a>
        </div>
      </div>
    </nav>
  </header>

  <main class="profile-container">
    <div class="profile-header">
      {{#if (eq user.role 'admin')}}
        <div class="admin-badge"><span class="icon">üõ°Ô∏è</span> ¬°Eres administrador! Tienes privilegios elevados.</div>
      {{/if}}
      <h2>Bienvenido, {{user.name}}!</h2>
      <div style="margin: 1.5em auto 0 auto; max-width: 500px; background: #e3f2fd; color: #1976d2; border-left: 6px solid #4a90e2; border-radius: 8px; padding: 1em 1.5em; font-size: 1.1em;">
        <strong>¬°Revisa tu correo!</strong> Te hemos enviado un email de bienvenida.<br>
        <span style="color: #555; font-size: 0.97em;">(Por estar en modo testing, el email fue enviado a la cuenta definida en la variable <b>{{GSMTP_TO}}</b> en vez de tu email real. Si eres el profesor, revisa la casilla configurada en <code>GSMTP_TO</code>.)</span>
      </div>
    </div>

    <div class="profile-info">
      <div class="info-item">
        <h3>Nombre</h3>
        <p>{{user.name}}</p>
      </div>
      <div class="info-item">
        <h3>Apellido</h3>
        <p>{{user.last_name}}</p>
      </div>
      <div class="info-item">
        <h3>Email</h3>
        <p>{{user.email}}</p>
      </div>
      <div class="info-item">
        <h3>Edad</h3>
        <p>{{user.age}} a√±os</p>
      </div>
      <div class="info-item">
        <h3>Rol</h3>
        <p><span class="role-badge role-{{user.role}}">{{user.role}}</span></p>
      </div>
      <div class="info-item">
        <h3>Carrito ID</h3>
        <p>{{#if user.cart}}{{user.cart}}{{else}}Sin carrito asignado{{/if}}</p>
      </div>
    </div>

    {{#if (eq user.role 'user')}}
    <section id="user-products-section" style="margin-top:2.5em;">
      <h3>Productos Disponibles</h3>
      <div id="user-product-message" style="margin-bottom:1em; color:#d32f2f; display:none;"></div>
      <table id="user-products-table" style="width:100%; border-collapse:collapse;">
        <thead>
          <tr style="background:#f0f4f8;"><th>Nombre</th><th>Precio</th><th>Stock</th><th>Descripci√≥n</th><th>Acciones</th></tr>
        </thead>
        <tbody></tbody>
      </table>
    </section>
    {{/if}}

    {{#if (eq user.role 'admin')}}
    <section id="admin-products-section" style="margin-top:2.5em;">
      <h3>Gesti√≥n de Productos</h3>
      <form id="product-form" style="margin-bottom:1.5em; display:flex; gap:0.5em; flex-wrap:wrap; align-items:center;">
        <input type="hidden" name="id" id="product-id" />
        <input type="text" name="name" id="product-name" placeholder="Nombre" required />
        <input type="number" name="price" id="product-price" placeholder="Precio" required min="0" step="0.01" />
        <input type="number" name="stock" id="product-stock" placeholder="Stock" required min="0" />
        <input type="text" name="description" id="product-description" placeholder="Descripci√≥n" />
        <button type="submit" id="product-save-btn">Agregar/Actualizar</button>
        <button type="button" id="product-cancel-btn" style="display:none;">Cancelar</button>
      </form>
      <div id="product-message" style="margin-bottom:1em; color:#d32f2f; display:none;"></div>
      <table id="products-table" style="width:100%; border-collapse:collapse;">
        <thead>
          <tr style="background:#f0f4f8;"><th>Nombre</th><th>Precio</th><th>Stock</th><th>Descripci√≥n</th><th>Acciones</th></tr>
        </thead>
        <tbody></tbody>
      </table>
    </section>

    <section id="admin-users-section" style="margin-top:2.5em;">
      <h3>Gesti√≥n de Usuarios</h3>
      <div id="user-message" style="margin-bottom:1em; color:#d32f2f; display:none;"></div>
      <table id="users-table" style="width:100%; border-collapse:collapse;">
        <thead>
          <tr style="background:#f0f4f8;"><th>Nombre</th><th>Email</th><th>Rol</th><th>Acciones</th></tr>
        </thead>
        <tbody></tbody>
      </table>
    </section>
    {{/if}}
  </main>

  <!-- Modal for admin request feedback -->
  <div id="admin-request-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.25); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:white; border-radius:12px; max-width:350px; margin:auto; padding:2em 1.5em; box-shadow:0 8px 32px rgba(0,0,0,0.18); text-align:center;">
      <div id="admin-request-modal-message" style="font-size:1.1em; margin-bottom:1.5em;"></div>
      <button id="admin-request-modal-ok" style="background:#4a90e2; color:white; border:none; border-radius:6px; padding:0.7em 2em; font-size:1em; cursor:pointer;">OK</button>
    </div>
  </div>

  <!-- User Cart Modal -->
  <div id="user-cart-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.25); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:white; border-radius:12px; max-width:400px; margin:auto; padding:2em 1.5em; box-shadow:0 8px 32px rgba(0,0,0,0.18); text-align:center;">
      <h3>Tu Carrito</h3>
      <div id="user-cart-contents"></div>
      <button id="user-cart-modal-ok" style="background:#4a90e2; color:white; border:none; border-radius:6px; padding:0.7em 2em; font-size:1em; cursor:pointer; margin-top:1em;">Cerrar</button>
    </div>
  </div>

  <script>
    // Profile menu dropdown logic
    const profileIcon = document.getElementById('profile-icon');
    const profileMenu = document.getElementById('profile-menu');
    profileIcon.addEventListener('click', (e) => {
      e.stopPropagation();
      profileMenu.style.display = profileMenu.style.display === 'block' ? 'none' : 'block';
    });
    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (profileMenu.style.display === 'block') {
        profileMenu.style.display = 'none';
      }
    });
    // Prevent menu from closing when clicking inside
    profileMenu.addEventListener('click', (e) => {
      e.stopPropagation();
    });
    // Logout functionality
    document.getElementById('logout-btn').addEventListener('click', async (e) => {
      e.preventDefault();
      try {
        await fetch('/api/auth/logout', {
          method: 'POST'
        });
      } catch (error) {
        console.error('Logout error:', error);
      } finally {
        window.location.href = '/users/login';
      }
    });
    // Request Admin role functionality with modal
    document.getElementById('request-admin-btn').addEventListener('click', async (e) => {
      e.preventDefault();
      const modal = document.getElementById('admin-request-modal');
      const modalMsg = document.getElementById('admin-request-modal-message');
      modal.style.display = 'flex';
      modalMsg.textContent = 'Enviando solicitud...';
      try {
        const response = await fetch('/api/users/request-admin', { method: 'POST' });
        const data = await response.json();
        if (response.ok) {
          modalMsg.textContent = 'Solicitud de rol de administrador enviada. Un administrador revisar√° tu solicitud.';
          modalMsg.style.color = '#1976d2';
        } else {
          modalMsg.textContent = data.error || 'Error al solicitar rol de administrador';
          modalMsg.style.color = '#d32f2f';
        }
      } catch (err) {
        modalMsg.textContent = 'Error de conexi√≥n';
        modalMsg.style.color = '#d32f2f';
      } finally {
        profileMenu.style.display = 'none';
      }
    });
    document.getElementById('admin-request-modal-ok').addEventListener('click', () => {
      document.getElementById('admin-request-modal').style.display = 'none';
    });

    // --- ADMIN PRODUCT MANAGEMENT ---
    if ({{#if (eq user.role 'admin')}}true{{else}}false{{/if}}) {
      const productForm = document.getElementById('product-form');
      const productIdField = document.getElementById('product-id');
      const productNameField = document.getElementById('product-name');
      const productPriceField = document.getElementById('product-price');
      const productStockField = document.getElementById('product-stock');
      const productDescField = document.getElementById('product-description');
      const productSaveBtn = document.getElementById('product-save-btn');
      const productCancelBtn = document.getElementById('product-cancel-btn');
      const productMsg = document.getElementById('product-message');
      const productsTableBody = document.querySelector('#products-table tbody');

      let editingProductId = null;

      function showProductMsg(msg, color = '#d32f2f') {
        productMsg.textContent = msg;
        productMsg.style.color = color;
        productMsg.style.display = 'block';
        setTimeout(() => { productMsg.style.display = 'none'; }, 2500);
      }

      async function fetchProducts() {
        const res = await fetch('/api/products');
        const products = await res.json();
        renderProducts(products);
      }

      function renderProducts(products) {
        productsTableBody.innerHTML = '';
        products.forEach(prod => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${prod.name}</td>
            <td>$${prod.price.toFixed(2)}</td>
            <td>${prod.stock}</td>
            <td>${prod.description || ''}</td>
            <td>
              <button data-id="${prod._id}" class="edit-product-btn">Editar</button>
              <button data-id="${prod._id}" class="delete-product-btn" style="color:#d32f2f;">Eliminar</button>
            </td>
          `;
          productsTableBody.appendChild(tr);
        });
      }

      productForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const id = productIdField.value;
        const data = {
          name: productNameField.value,
          price: parseFloat(productPriceField.value),
          stock: parseInt(productStockField.value),
          description: productDescField.value
        };
        let res, prod;
        if (id) {
          res = await fetch(`/api/products/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
        } else {
          res = await fetch('/api/products', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
        }
        prod = await res.json();
        if (res.ok) {
          showProductMsg('Producto guardado', '#388e3c');
          productForm.reset();
          productIdField.value = '';
          productCancelBtn.style.display = 'none';
          editingProductId = null;
          fetchProducts();
        } else {
          showProductMsg(prod.error || 'Error al guardar producto');
        }
      });

      productCancelBtn.addEventListener('click', () => {
        productForm.reset();
        productIdField.value = '';
        productCancelBtn.style.display = 'none';
        editingProductId = null;
      });

      productsTableBody.addEventListener('click', async (e) => {
        if (e.target.classList.contains('edit-product-btn')) {
          const id = e.target.getAttribute('data-id');
          const res = await fetch(`/api/products/${id}`);
          const prod = await res.json();
          productIdField.value = prod._id;
          productNameField.value = prod.name;
          productPriceField.value = prod.price;
          productStockField.value = prod.stock;
          productDescField.value = prod.description || '';
          productCancelBtn.style.display = '';
          editingProductId = id;
        } else if (e.target.classList.contains('delete-product-btn')) {
          const id = e.target.getAttribute('data-id');
          if (confirm('¬øEliminar este producto?')) {
            const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
            if (res.ok) {
              showProductMsg('Producto eliminado', '#388e3c');
              fetchProducts();
            } else {
              showProductMsg('Error al eliminar producto');
            }
          }
        }
      });

      fetchProducts();
    }

    // --- ADMIN USER MANAGEMENT ---
    if ({{#if (eq user.role 'admin')}}true{{else}}false{{/if}}) {
      const usersTableBody = document.querySelector('#users-table tbody');
      const userMsg = document.getElementById('user-message');
      function showUserMsg(msg, color = '#d32f2f') {
        userMsg.textContent = msg;
        userMsg.style.color = color;
        userMsg.style.display = 'block';
        setTimeout(() => { userMsg.style.display = 'none'; }, 2500);
      }
      async function fetchUsers() {
        const res = await fetch('/api/users/admin');
        const users = await res.json();
        renderUsers(users);
      }
      function renderUsers(users) {
        usersTableBody.innerHTML = '';
        users.forEach(u => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${u.name} ${u.last_name}</td>
            <td>${u.email}</td>
            <td>
              <select data-id="${u.id}" class="user-role-select">
                <option value="user" ${u.role === 'user' ? 'selected' : ''}>user</option>
                <option value="admin" ${u.role === 'admin' ? 'selected' : ''}>admin</option>
                <option value="premium" ${u.role === 'premium' ? 'selected' : ''}>premium</option>
              </select>
            </td>
            <td>
              <button data-id="${u.id}" class="delete-user-btn" style="color:#d32f2f;">Eliminar</button>
            </td>
          `;
          usersTableBody.appendChild(tr);
        });
      }
      usersTableBody.addEventListener('change', async (e) => {
        if (e.target.classList.contains('user-role-select')) {
          const id = e.target.getAttribute('data-id');
          const role = e.target.value;
          const res = await fetch(`/api/users/${id}/role`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ role }) });
          if (res.ok) {
            showUserMsg('Rol actualizado', '#388e3c');
            fetchUsers();
          } else {
            showUserMsg('Error al actualizar rol');
          }
        }
      });
      usersTableBody.addEventListener('click', async (e) => {
        if (e.target.classList.contains('delete-user-btn')) {
          const id = e.target.getAttribute('data-id');
          if (confirm('¬øEliminar este usuario?')) {
            const res = await fetch(`/api/users/${id}`, { method: 'DELETE' });
            if (res.ok) {
              showUserMsg('Usuario eliminado', '#388e3c');
              fetchUsers();
            } else {
              showUserMsg('Error al eliminar usuario');
            }
          }
        }
      });
      fetchUsers();
    }

    // --- USER PRODUCT LIST & CART ---
    if ({{#if (eq user.role 'user')}}true{{else}}false{{/if}}) {
      const userProductsTableBody = document.querySelector('#user-products-table tbody');
      const userProductMsg = document.getElementById('user-product-message');
      const cartIcon = document.getElementById('user-cart-icon');
      const cartCount = document.getElementById('user-cart-count');
      const cartModal = document.getElementById('user-cart-modal');
      const cartContents = document.getElementById('user-cart-contents');
      const cartModalOk = document.getElementById('user-cart-modal-ok');

      function showUserProductMsg(msg, color = '#d32f2f') {
        userProductMsg.textContent = msg;
        userProductMsg.style.color = color;
        userProductMsg.style.display = 'block';
        setTimeout(() => { userProductMsg.style.display = 'none'; }, 2500);
      }

      async function fetchUserProducts() {
        const res = await fetch('/api/products');
        const products = await res.json();
        renderUserProducts(products);
      }

      function renderUserProducts(products) {
        userProductsTableBody.innerHTML = '';
        products.forEach(prod => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${prod.name}</td>
            <td>$${prod.price.toFixed(2)}</td>
            <td>${prod.stock}</td>
            <td>${prod.description || ''}</td>
            <td>
              <button data-id="${prod._id}" class="add-to-cart-btn" ${prod.stock < 1 ? 'disabled' : ''}>Agregar al carrito</button>
            </td>
          `;
          userProductsTableBody.appendChild(tr);
        });
      }

      userProductsTableBody.addEventListener('click', async (e) => {
        if (e.target.classList.contains('add-to-cart-btn')) {
          const id = e.target.getAttribute('data-id');
          // Defensive: Only proceed if id looks like a Mongo ObjectId (24 hex chars)
          if (!id || !/^[a-fA-F0-9]{24}$/.test(id)) {
            console.warn('Invalid product id for add to cart:', id);
            return;
          }
          const res = await fetch('/api/products/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId: id, quantity: 1 })
          });
          const data = await res.json();
          if (res.ok) {
            showUserProductMsg('Producto agregado al carrito', '#388e3c');
            fetchUserProducts();
            await fetchUserCart();
          } else {
            showUserProductMsg(data.error || 'Error al agregar al carrito');
          }
        }
      });

      // --- CART ICON & MODAL ---
      cartIcon.addEventListener('click', async () => {
        await fetchUserCart();
        cartModal.style.display = 'flex';
        renderCartModal();
        // Debug: log cart and user info
        const cart = window._userCart;
        const userIdFromUI = '{{user.id}}';
        if (cart) {
          console.log('Cart info:', cart);
          if (cart.user) {
            console.log('Cart user ID:', cart.user);
            console.log('User ID from UI:', userIdFromUI);
            if (cart.user === userIdFromUI || (cart.user._id && cart.user._id === userIdFromUI)) {
              console.log('User ID matches between UI and cart.');
            } else {
              console.warn('User ID does NOT match between UI and cart!');
            }
          }
        }
      });
      cartModalOk.addEventListener('click', () => {
        cartModal.style.display = 'none';
      });

      async function fetchUserCart() {
        const res = await fetch('/api/products/cart');
        const cart = await res.json();
        console.log('Fetched cart:', cart); // DEBUG
        updateCartCount(cart);
        window._userCart = cart; // for modal rendering
      }

      function updateCartCount(cart) {
        if (!cart || !Array.isArray(cart.products)) {
          cartCount.textContent = 0;
          return;
        }
        const count = cart.products.reduce((sum, p) => sum + (p.quantity || 0), 0);
        cartCount.textContent = count;
      }

      function renderCartModal() {
        const cart = window._userCart || { products: [] };
        if (!cart.products || !cart.products.length) {
          cartContents.innerHTML = `<p>Tu carrito est√° vac√≠o.</p>` +
            `{{#if user.cart}}<div style="color:#888; font-size:0.97em; margin-top:0.5em;">Carrito ID: <b>{{user.cart}}</b></div>{{/if}}`;
          return;
        }
        cartContents.innerHTML = '<ul style="list-style:none; padding:0;">' +
          cart.products.map(p =>
            `<li style="margin-bottom:0.5em;">${p.product && p.product.name ? p.product.name : 'Producto'} x ${p.quantity} <span style="color:#888;">($${p.product && p.product.price ? p.product.price.toFixed(2) : '0.00'})</span></li>`
          ).join('') +
          '</ul>';
      }

      fetchUserProducts();
      fetchUserCart();
    }
  </script>
</body>
</html> 